//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AbendLog.DataAccess
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ASPAbendDataEntities : DbContext
    {
        public ASPAbendDataEntities()
            : base("name=ASPAbendDataEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AbendLog> AbendLogs { get; set; }
        public virtual DbSet<PermanentFix> PermanentFixes { get; set; }
        public virtual DbSet<Report> Reports { get; set; }
        public virtual DbSet<UserTbl> UserTbls { get; set; }
    
        public virtual ObjectResult<p_GetAbendlogData_Result> p_GetAbendlogData(Nullable<int> iD, string incidentNumber, string region, string jobName, string stepName, string programName, string abendCode, string abendDescription, Nullable<System.DateTime> abendDate, Nullable<System.TimeSpan> abendTime, Nullable<System.TimeSpan> restartTime, string onCallAssociate, string timeSpend, string rCA, string classification, string solution, string openedBy, string resolvedBy, Nullable<System.DateTime> resolvedDate, string callFromEnsono, string escalation, string levelTimeForEscalation, string escalatedTo, string escalatedBy, Nullable<System.DateTime> escalatedDate, string status, string comments, string sLABreach, string sLABreachComments, string createdby, Nullable<System.DateTime> createdDate, string modifiedby, Nullable<System.DateTime> modifiedDate, Nullable<bool> permanentFix)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var incidentNumberParameter = incidentNumber != null ?
                new ObjectParameter("IncidentNumber", incidentNumber) :
                new ObjectParameter("IncidentNumber", typeof(string));
    
            var regionParameter = region != null ?
                new ObjectParameter("Region", region) :
                new ObjectParameter("Region", typeof(string));
    
            var jobNameParameter = jobName != null ?
                new ObjectParameter("JobName", jobName) :
                new ObjectParameter("JobName", typeof(string));
    
            var stepNameParameter = stepName != null ?
                new ObjectParameter("StepName", stepName) :
                new ObjectParameter("StepName", typeof(string));
    
            var programNameParameter = programName != null ?
                new ObjectParameter("ProgramName", programName) :
                new ObjectParameter("ProgramName", typeof(string));
    
            var abendCodeParameter = abendCode != null ?
                new ObjectParameter("AbendCode", abendCode) :
                new ObjectParameter("AbendCode", typeof(string));
    
            var abendDescriptionParameter = abendDescription != null ?
                new ObjectParameter("AbendDescription", abendDescription) :
                new ObjectParameter("AbendDescription", typeof(string));
    
            var abendDateParameter = abendDate.HasValue ?
                new ObjectParameter("AbendDate", abendDate) :
                new ObjectParameter("AbendDate", typeof(System.DateTime));
    
            var abendTimeParameter = abendTime.HasValue ?
                new ObjectParameter("AbendTime", abendTime) :
                new ObjectParameter("AbendTime", typeof(System.TimeSpan));
    
            var restartTimeParameter = restartTime.HasValue ?
                new ObjectParameter("RestartTime", restartTime) :
                new ObjectParameter("RestartTime", typeof(System.TimeSpan));
    
            var onCallAssociateParameter = onCallAssociate != null ?
                new ObjectParameter("OnCallAssociate", onCallAssociate) :
                new ObjectParameter("OnCallAssociate", typeof(string));
    
            var timeSpendParameter = timeSpend != null ?
                new ObjectParameter("TimeSpend", timeSpend) :
                new ObjectParameter("TimeSpend", typeof(string));
    
            var rCAParameter = rCA != null ?
                new ObjectParameter("RCA", rCA) :
                new ObjectParameter("RCA", typeof(string));
    
            var classificationParameter = classification != null ?
                new ObjectParameter("Classification", classification) :
                new ObjectParameter("Classification", typeof(string));
    
            var solutionParameter = solution != null ?
                new ObjectParameter("Solution", solution) :
                new ObjectParameter("Solution", typeof(string));
    
            var openedByParameter = openedBy != null ?
                new ObjectParameter("OpenedBy", openedBy) :
                new ObjectParameter("OpenedBy", typeof(string));
    
            var resolvedByParameter = resolvedBy != null ?
                new ObjectParameter("ResolvedBy", resolvedBy) :
                new ObjectParameter("ResolvedBy", typeof(string));
    
            var resolvedDateParameter = resolvedDate.HasValue ?
                new ObjectParameter("ResolvedDate", resolvedDate) :
                new ObjectParameter("ResolvedDate", typeof(System.DateTime));
    
            var callFromEnsonoParameter = callFromEnsono != null ?
                new ObjectParameter("CallFromEnsono", callFromEnsono) :
                new ObjectParameter("CallFromEnsono", typeof(string));
    
            var escalationParameter = escalation != null ?
                new ObjectParameter("Escalation", escalation) :
                new ObjectParameter("Escalation", typeof(string));
    
            var levelTimeForEscalationParameter = levelTimeForEscalation != null ?
                new ObjectParameter("LevelTimeForEscalation", levelTimeForEscalation) :
                new ObjectParameter("LevelTimeForEscalation", typeof(string));
    
            var escalatedToParameter = escalatedTo != null ?
                new ObjectParameter("EscalatedTo", escalatedTo) :
                new ObjectParameter("EscalatedTo", typeof(string));
    
            var escalatedByParameter = escalatedBy != null ?
                new ObjectParameter("EscalatedBy", escalatedBy) :
                new ObjectParameter("EscalatedBy", typeof(string));
    
            var escalatedDateParameter = escalatedDate.HasValue ?
                new ObjectParameter("EscalatedDate", escalatedDate) :
                new ObjectParameter("EscalatedDate", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var sLABreachParameter = sLABreach != null ?
                new ObjectParameter("SLABreach", sLABreach) :
                new ObjectParameter("SLABreach", typeof(string));
    
            var sLABreachCommentsParameter = sLABreachComments != null ?
                new ObjectParameter("SLABreachComments", sLABreachComments) :
                new ObjectParameter("SLABreachComments", typeof(string));
    
            var createdbyParameter = createdby != null ?
                new ObjectParameter("Createdby", createdby) :
                new ObjectParameter("Createdby", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedbyParameter = modifiedby != null ?
                new ObjectParameter("Modifiedby", modifiedby) :
                new ObjectParameter("Modifiedby", typeof(string));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var permanentFixParameter = permanentFix.HasValue ?
                new ObjectParameter("PermanentFix", permanentFix) :
                new ObjectParameter("PermanentFix", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<p_GetAbendlogData_Result>("p_GetAbendlogData", iDParameter, incidentNumberParameter, regionParameter, jobNameParameter, stepNameParameter, programNameParameter, abendCodeParameter, abendDescriptionParameter, abendDateParameter, abendTimeParameter, restartTimeParameter, onCallAssociateParameter, timeSpendParameter, rCAParameter, classificationParameter, solutionParameter, openedByParameter, resolvedByParameter, resolvedDateParameter, callFromEnsonoParameter, escalationParameter, levelTimeForEscalationParameter, escalatedToParameter, escalatedByParameter, escalatedDateParameter, statusParameter, commentsParameter, sLABreachParameter, sLABreachCommentsParameter, createdbyParameter, createdDateParameter, modifiedbyParameter, modifiedDateParameter, permanentFixParameter);
        }
    
        public virtual ObjectResult<p_GetAbendlogDataByID_Result> p_GetAbendlogDataByID(Nullable<int> iD, string incidentNumber, string region, string jobName, string stepName, string programName, string abendCode, string abendDescription, Nullable<System.DateTime> abendDate, Nullable<System.TimeSpan> abendTime, Nullable<System.TimeSpan> restartTime, string onCallAssociate, string timeSpend, string rCA, string classification, string solution, string openedBy, string resolvedBy, Nullable<System.DateTime> resolvedDate, string callFromEnsono, string escalation, string levelTimeForEscalation, string escalatedTo, string escalatedBy, Nullable<System.DateTime> escalatedDate, string status, string comments, string sLABreach, string sLABreachComments, string createdby, Nullable<System.DateTime> createdDate, string modifiedby, Nullable<System.DateTime> modifiedDate, Nullable<bool> permanentFix)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var incidentNumberParameter = incidentNumber != null ?
                new ObjectParameter("IncidentNumber", incidentNumber) :
                new ObjectParameter("IncidentNumber", typeof(string));
    
            var regionParameter = region != null ?
                new ObjectParameter("Region", region) :
                new ObjectParameter("Region", typeof(string));
    
            var jobNameParameter = jobName != null ?
                new ObjectParameter("JobName", jobName) :
                new ObjectParameter("JobName", typeof(string));
    
            var stepNameParameter = stepName != null ?
                new ObjectParameter("StepName", stepName) :
                new ObjectParameter("StepName", typeof(string));
    
            var programNameParameter = programName != null ?
                new ObjectParameter("ProgramName", programName) :
                new ObjectParameter("ProgramName", typeof(string));
    
            var abendCodeParameter = abendCode != null ?
                new ObjectParameter("AbendCode", abendCode) :
                new ObjectParameter("AbendCode", typeof(string));
    
            var abendDescriptionParameter = abendDescription != null ?
                new ObjectParameter("AbendDescription", abendDescription) :
                new ObjectParameter("AbendDescription", typeof(string));
    
            var abendDateParameter = abendDate.HasValue ?
                new ObjectParameter("AbendDate", abendDate) :
                new ObjectParameter("AbendDate", typeof(System.DateTime));
    
            var abendTimeParameter = abendTime.HasValue ?
                new ObjectParameter("AbendTime", abendTime) :
                new ObjectParameter("AbendTime", typeof(System.TimeSpan));
    
            var restartTimeParameter = restartTime.HasValue ?
                new ObjectParameter("RestartTime", restartTime) :
                new ObjectParameter("RestartTime", typeof(System.TimeSpan));
    
            var onCallAssociateParameter = onCallAssociate != null ?
                new ObjectParameter("OnCallAssociate", onCallAssociate) :
                new ObjectParameter("OnCallAssociate", typeof(string));
    
            var timeSpendParameter = timeSpend != null ?
                new ObjectParameter("TimeSpend", timeSpend) :
                new ObjectParameter("TimeSpend", typeof(string));
    
            var rCAParameter = rCA != null ?
                new ObjectParameter("RCA", rCA) :
                new ObjectParameter("RCA", typeof(string));
    
            var classificationParameter = classification != null ?
                new ObjectParameter("Classification", classification) :
                new ObjectParameter("Classification", typeof(string));
    
            var solutionParameter = solution != null ?
                new ObjectParameter("Solution", solution) :
                new ObjectParameter("Solution", typeof(string));
    
            var openedByParameter = openedBy != null ?
                new ObjectParameter("OpenedBy", openedBy) :
                new ObjectParameter("OpenedBy", typeof(string));
    
            var resolvedByParameter = resolvedBy != null ?
                new ObjectParameter("ResolvedBy", resolvedBy) :
                new ObjectParameter("ResolvedBy", typeof(string));
    
            var resolvedDateParameter = resolvedDate.HasValue ?
                new ObjectParameter("ResolvedDate", resolvedDate) :
                new ObjectParameter("ResolvedDate", typeof(System.DateTime));
    
            var callFromEnsonoParameter = callFromEnsono != null ?
                new ObjectParameter("CallFromEnsono", callFromEnsono) :
                new ObjectParameter("CallFromEnsono", typeof(string));
    
            var escalationParameter = escalation != null ?
                new ObjectParameter("Escalation", escalation) :
                new ObjectParameter("Escalation", typeof(string));
    
            var levelTimeForEscalationParameter = levelTimeForEscalation != null ?
                new ObjectParameter("LevelTimeForEscalation", levelTimeForEscalation) :
                new ObjectParameter("LevelTimeForEscalation", typeof(string));
    
            var escalatedToParameter = escalatedTo != null ?
                new ObjectParameter("EscalatedTo", escalatedTo) :
                new ObjectParameter("EscalatedTo", typeof(string));
    
            var escalatedByParameter = escalatedBy != null ?
                new ObjectParameter("EscalatedBy", escalatedBy) :
                new ObjectParameter("EscalatedBy", typeof(string));
    
            var escalatedDateParameter = escalatedDate.HasValue ?
                new ObjectParameter("EscalatedDate", escalatedDate) :
                new ObjectParameter("EscalatedDate", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var sLABreachParameter = sLABreach != null ?
                new ObjectParameter("SLABreach", sLABreach) :
                new ObjectParameter("SLABreach", typeof(string));
    
            var sLABreachCommentsParameter = sLABreachComments != null ?
                new ObjectParameter("SLABreachComments", sLABreachComments) :
                new ObjectParameter("SLABreachComments", typeof(string));
    
            var createdbyParameter = createdby != null ?
                new ObjectParameter("Createdby", createdby) :
                new ObjectParameter("Createdby", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedbyParameter = modifiedby != null ?
                new ObjectParameter("Modifiedby", modifiedby) :
                new ObjectParameter("Modifiedby", typeof(string));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var permanentFixParameter = permanentFix.HasValue ?
                new ObjectParameter("PermanentFix", permanentFix) :
                new ObjectParameter("PermanentFix", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<p_GetAbendlogDataByID_Result>("p_GetAbendlogDataByID", iDParameter, incidentNumberParameter, regionParameter, jobNameParameter, stepNameParameter, programNameParameter, abendCodeParameter, abendDescriptionParameter, abendDateParameter, abendTimeParameter, restartTimeParameter, onCallAssociateParameter, timeSpendParameter, rCAParameter, classificationParameter, solutionParameter, openedByParameter, resolvedByParameter, resolvedDateParameter, callFromEnsonoParameter, escalationParameter, levelTimeForEscalationParameter, escalatedToParameter, escalatedByParameter, escalatedDateParameter, statusParameter, commentsParameter, sLABreachParameter, sLABreachCommentsParameter, createdbyParameter, createdDateParameter, modifiedbyParameter, modifiedDateParameter, permanentFixParameter);
        }
    
        public virtual int p_GetInsertPermanentFixData(Nullable<int> iD, string incidentNumber, string rCA, string createdBy, Nullable<System.DateTime> createdDate, string modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var incidentNumberParameter = incidentNumber != null ?
                new ObjectParameter("IncidentNumber", incidentNumber) :
                new ObjectParameter("IncidentNumber", typeof(string));
    
            var rCAParameter = rCA != null ?
                new ObjectParameter("RCA", rCA) :
                new ObjectParameter("RCA", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy != null ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(string));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("p_GetInsertPermanentFixData", iDParameter, incidentNumberParameter, rCAParameter, createdByParameter, createdDateParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<p_GetPermanentFixData_Result> p_GetPermanentFixData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<p_GetPermanentFixData_Result>("p_GetPermanentFixData");
        }
    
        public virtual ObjectResult<p_GetPermanentFixDataWithId_Result> p_GetPermanentFixDataWithId(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<p_GetPermanentFixDataWithId_Result>("p_GetPermanentFixDataWithId", iDParameter);
        }
    
        public virtual ObjectResult<p_GetReports_Result> p_GetReports()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<p_GetReports_Result>("p_GetReports");
        }
    
        public virtual int p_InsertAbendLogData(Nullable<int> iD, string incidentNumber, string region, string jobName, string stepName, string programName, string abendCode, string abendDescription, Nullable<System.DateTime> abendDate, Nullable<System.TimeSpan> abendTime, Nullable<System.TimeSpan> restartTime, string onCallAssociate, string timeSpend, string rCA, string classification, string solution, string openedBy, string resolvedBy, Nullable<System.DateTime> resolvedDate, string callFromEnsono, string escalation, string levelTimeForEscalation, string escalatedTo, string escalatedBy, Nullable<System.DateTime> escalatedDate, string status, string comments, string sLABreach, string sLABreachComments, string createdby, Nullable<System.DateTime> createdDate, string modifiedby, Nullable<System.DateTime> modifiedDate, Nullable<bool> permanentFix)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var incidentNumberParameter = incidentNumber != null ?
                new ObjectParameter("IncidentNumber", incidentNumber) :
                new ObjectParameter("IncidentNumber", typeof(string));
    
            var regionParameter = region != null ?
                new ObjectParameter("Region", region) :
                new ObjectParameter("Region", typeof(string));
    
            var jobNameParameter = jobName != null ?
                new ObjectParameter("JobName", jobName) :
                new ObjectParameter("JobName", typeof(string));
    
            var stepNameParameter = stepName != null ?
                new ObjectParameter("StepName", stepName) :
                new ObjectParameter("StepName", typeof(string));
    
            var programNameParameter = programName != null ?
                new ObjectParameter("ProgramName", programName) :
                new ObjectParameter("ProgramName", typeof(string));
    
            var abendCodeParameter = abendCode != null ?
                new ObjectParameter("AbendCode", abendCode) :
                new ObjectParameter("AbendCode", typeof(string));
    
            var abendDescriptionParameter = abendDescription != null ?
                new ObjectParameter("AbendDescription", abendDescription) :
                new ObjectParameter("AbendDescription", typeof(string));
    
            var abendDateParameter = abendDate.HasValue ?
                new ObjectParameter("AbendDate", abendDate) :
                new ObjectParameter("AbendDate", typeof(System.DateTime));
    
            var abendTimeParameter = abendTime.HasValue ?
                new ObjectParameter("AbendTime", abendTime) :
                new ObjectParameter("AbendTime", typeof(System.TimeSpan));
    
            var restartTimeParameter = restartTime.HasValue ?
                new ObjectParameter("RestartTime", restartTime) :
                new ObjectParameter("RestartTime", typeof(System.TimeSpan));
    
            var onCallAssociateParameter = onCallAssociate != null ?
                new ObjectParameter("OnCallAssociate", onCallAssociate) :
                new ObjectParameter("OnCallAssociate", typeof(string));
    
            var timeSpendParameter = timeSpend != null ?
                new ObjectParameter("TimeSpend", timeSpend) :
                new ObjectParameter("TimeSpend", typeof(string));
    
            var rCAParameter = rCA != null ?
                new ObjectParameter("RCA", rCA) :
                new ObjectParameter("RCA", typeof(string));
    
            var classificationParameter = classification != null ?
                new ObjectParameter("Classification", classification) :
                new ObjectParameter("Classification", typeof(string));
    
            var solutionParameter = solution != null ?
                new ObjectParameter("Solution", solution) :
                new ObjectParameter("Solution", typeof(string));
    
            var openedByParameter = openedBy != null ?
                new ObjectParameter("OpenedBy", openedBy) :
                new ObjectParameter("OpenedBy", typeof(string));
    
            var resolvedByParameter = resolvedBy != null ?
                new ObjectParameter("ResolvedBy", resolvedBy) :
                new ObjectParameter("ResolvedBy", typeof(string));
    
            var resolvedDateParameter = resolvedDate.HasValue ?
                new ObjectParameter("ResolvedDate", resolvedDate) :
                new ObjectParameter("ResolvedDate", typeof(System.DateTime));
    
            var callFromEnsonoParameter = callFromEnsono != null ?
                new ObjectParameter("CallFromEnsono", callFromEnsono) :
                new ObjectParameter("CallFromEnsono", typeof(string));
    
            var escalationParameter = escalation != null ?
                new ObjectParameter("Escalation", escalation) :
                new ObjectParameter("Escalation", typeof(string));
    
            var levelTimeForEscalationParameter = levelTimeForEscalation != null ?
                new ObjectParameter("LevelTimeForEscalation", levelTimeForEscalation) :
                new ObjectParameter("LevelTimeForEscalation", typeof(string));
    
            var escalatedToParameter = escalatedTo != null ?
                new ObjectParameter("EscalatedTo", escalatedTo) :
                new ObjectParameter("EscalatedTo", typeof(string));
    
            var escalatedByParameter = escalatedBy != null ?
                new ObjectParameter("EscalatedBy", escalatedBy) :
                new ObjectParameter("EscalatedBy", typeof(string));
    
            var escalatedDateParameter = escalatedDate.HasValue ?
                new ObjectParameter("EscalatedDate", escalatedDate) :
                new ObjectParameter("EscalatedDate", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var sLABreachParameter = sLABreach != null ?
                new ObjectParameter("SLABreach", sLABreach) :
                new ObjectParameter("SLABreach", typeof(string));
    
            var sLABreachCommentsParameter = sLABreachComments != null ?
                new ObjectParameter("SLABreachComments", sLABreachComments) :
                new ObjectParameter("SLABreachComments", typeof(string));
    
            var createdbyParameter = createdby != null ?
                new ObjectParameter("Createdby", createdby) :
                new ObjectParameter("Createdby", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedbyParameter = modifiedby != null ?
                new ObjectParameter("Modifiedby", modifiedby) :
                new ObjectParameter("Modifiedby", typeof(string));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var permanentFixParameter = permanentFix.HasValue ?
                new ObjectParameter("PermanentFix", permanentFix) :
                new ObjectParameter("PermanentFix", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("p_InsertAbendLogData", iDParameter, incidentNumberParameter, regionParameter, jobNameParameter, stepNameParameter, programNameParameter, abendCodeParameter, abendDescriptionParameter, abendDateParameter, abendTimeParameter, restartTimeParameter, onCallAssociateParameter, timeSpendParameter, rCAParameter, classificationParameter, solutionParameter, openedByParameter, resolvedByParameter, resolvedDateParameter, callFromEnsonoParameter, escalationParameter, levelTimeForEscalationParameter, escalatedToParameter, escalatedByParameter, escalatedDateParameter, statusParameter, commentsParameter, sLABreachParameter, sLABreachCommentsParameter, createdbyParameter, createdDateParameter, modifiedbyParameter, modifiedDateParameter, permanentFixParameter);
        }
    
        public virtual ObjectResult<p_LoginCredentials_Result> p_LoginCredentials(string lANID, string pASSWORD)
        {
            var lANIDParameter = lANID != null ?
                new ObjectParameter("LANID", lANID) :
                new ObjectParameter("LANID", typeof(string));
    
            var pASSWORDParameter = pASSWORD != null ?
                new ObjectParameter("PASSWORD", pASSWORD) :
                new ObjectParameter("PASSWORD", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<p_LoginCredentials_Result>("p_LoginCredentials", lANIDParameter, pASSWORDParameter);
        }
    
        public virtual int p_UpdateAbendlogData(Nullable<int> iD, string incidentNumber, string region, string jobName, string stepName, string programName, string abendCode, string abendDescription, Nullable<System.DateTime> abendDate, Nullable<System.TimeSpan> abendTime, Nullable<System.TimeSpan> restartTime, string onCallAssociate, string timeSpend, string rCA, string classification, string solution, string openedBy, string resolvedBy, Nullable<System.DateTime> resolvedDate, string callFromEnsono, string escalation, string levelTimeForEscalation, string escalatedTo, string escalatedBy, Nullable<System.DateTime> escalatedDate, string status, string comments, string sLABreach, string sLABreachComments, string createdby, Nullable<System.DateTime> createdDate, string modifiedby, Nullable<System.DateTime> modifiedDate, Nullable<bool> permanentFix)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var incidentNumberParameter = incidentNumber != null ?
                new ObjectParameter("IncidentNumber", incidentNumber) :
                new ObjectParameter("IncidentNumber", typeof(string));
    
            var regionParameter = region != null ?
                new ObjectParameter("Region", region) :
                new ObjectParameter("Region", typeof(string));
    
            var jobNameParameter = jobName != null ?
                new ObjectParameter("JobName", jobName) :
                new ObjectParameter("JobName", typeof(string));
    
            var stepNameParameter = stepName != null ?
                new ObjectParameter("StepName", stepName) :
                new ObjectParameter("StepName", typeof(string));
    
            var programNameParameter = programName != null ?
                new ObjectParameter("ProgramName", programName) :
                new ObjectParameter("ProgramName", typeof(string));
    
            var abendCodeParameter = abendCode != null ?
                new ObjectParameter("AbendCode", abendCode) :
                new ObjectParameter("AbendCode", typeof(string));
    
            var abendDescriptionParameter = abendDescription != null ?
                new ObjectParameter("AbendDescription", abendDescription) :
                new ObjectParameter("AbendDescription", typeof(string));
    
            var abendDateParameter = abendDate.HasValue ?
                new ObjectParameter("AbendDate", abendDate) :
                new ObjectParameter("AbendDate", typeof(System.DateTime));
    
            var abendTimeParameter = abendTime.HasValue ?
                new ObjectParameter("AbendTime", abendTime) :
                new ObjectParameter("AbendTime", typeof(System.TimeSpan));
    
            var restartTimeParameter = restartTime.HasValue ?
                new ObjectParameter("RestartTime", restartTime) :
                new ObjectParameter("RestartTime", typeof(System.TimeSpan));
    
            var onCallAssociateParameter = onCallAssociate != null ?
                new ObjectParameter("OnCallAssociate", onCallAssociate) :
                new ObjectParameter("OnCallAssociate", typeof(string));
    
            var timeSpendParameter = timeSpend != null ?
                new ObjectParameter("TimeSpend", timeSpend) :
                new ObjectParameter("TimeSpend", typeof(string));
    
            var rCAParameter = rCA != null ?
                new ObjectParameter("RCA", rCA) :
                new ObjectParameter("RCA", typeof(string));
    
            var classificationParameter = classification != null ?
                new ObjectParameter("Classification", classification) :
                new ObjectParameter("Classification", typeof(string));
    
            var solutionParameter = solution != null ?
                new ObjectParameter("Solution", solution) :
                new ObjectParameter("Solution", typeof(string));
    
            var openedByParameter = openedBy != null ?
                new ObjectParameter("OpenedBy", openedBy) :
                new ObjectParameter("OpenedBy", typeof(string));
    
            var resolvedByParameter = resolvedBy != null ?
                new ObjectParameter("ResolvedBy", resolvedBy) :
                new ObjectParameter("ResolvedBy", typeof(string));
    
            var resolvedDateParameter = resolvedDate.HasValue ?
                new ObjectParameter("ResolvedDate", resolvedDate) :
                new ObjectParameter("ResolvedDate", typeof(System.DateTime));
    
            var callFromEnsonoParameter = callFromEnsono != null ?
                new ObjectParameter("CallFromEnsono", callFromEnsono) :
                new ObjectParameter("CallFromEnsono", typeof(string));
    
            var escalationParameter = escalation != null ?
                new ObjectParameter("Escalation", escalation) :
                new ObjectParameter("Escalation", typeof(string));
    
            var levelTimeForEscalationParameter = levelTimeForEscalation != null ?
                new ObjectParameter("LevelTimeForEscalation", levelTimeForEscalation) :
                new ObjectParameter("LevelTimeForEscalation", typeof(string));
    
            var escalatedToParameter = escalatedTo != null ?
                new ObjectParameter("EscalatedTo", escalatedTo) :
                new ObjectParameter("EscalatedTo", typeof(string));
    
            var escalatedByParameter = escalatedBy != null ?
                new ObjectParameter("EscalatedBy", escalatedBy) :
                new ObjectParameter("EscalatedBy", typeof(string));
    
            var escalatedDateParameter = escalatedDate.HasValue ?
                new ObjectParameter("EscalatedDate", escalatedDate) :
                new ObjectParameter("EscalatedDate", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var sLABreachParameter = sLABreach != null ?
                new ObjectParameter("SLABreach", sLABreach) :
                new ObjectParameter("SLABreach", typeof(string));
    
            var sLABreachCommentsParameter = sLABreachComments != null ?
                new ObjectParameter("SLABreachComments", sLABreachComments) :
                new ObjectParameter("SLABreachComments", typeof(string));
    
            var createdbyParameter = createdby != null ?
                new ObjectParameter("Createdby", createdby) :
                new ObjectParameter("Createdby", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedbyParameter = modifiedby != null ?
                new ObjectParameter("Modifiedby", modifiedby) :
                new ObjectParameter("Modifiedby", typeof(string));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var permanentFixParameter = permanentFix.HasValue ?
                new ObjectParameter("PermanentFix", permanentFix) :
                new ObjectParameter("PermanentFix", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("p_UpdateAbendlogData", iDParameter, incidentNumberParameter, regionParameter, jobNameParameter, stepNameParameter, programNameParameter, abendCodeParameter, abendDescriptionParameter, abendDateParameter, abendTimeParameter, restartTimeParameter, onCallAssociateParameter, timeSpendParameter, rCAParameter, classificationParameter, solutionParameter, openedByParameter, resolvedByParameter, resolvedDateParameter, callFromEnsonoParameter, escalationParameter, levelTimeForEscalationParameter, escalatedToParameter, escalatedByParameter, escalatedDateParameter, statusParameter, commentsParameter, sLABreachParameter, sLABreachCommentsParameter, createdbyParameter, createdDateParameter, modifiedbyParameter, modifiedDateParameter, permanentFixParameter);
        }
    
        public virtual int p_UpdatePermanentFixDate(Nullable<int> iD, string incidentNumber, string rCA, string createdBy, Nullable<System.DateTime> createdDate, string modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var incidentNumberParameter = incidentNumber != null ?
                new ObjectParameter("IncidentNumber", incidentNumber) :
                new ObjectParameter("IncidentNumber", typeof(string));
    
            var rCAParameter = rCA != null ?
                new ObjectParameter("RCA", rCA) :
                new ObjectParameter("RCA", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy != null ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(string));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("p_UpdatePermanentFixDate", iDParameter, incidentNumberParameter, rCAParameter, createdByParameter, createdDateParameter, modifiedByParameter, modifiedDateParameter);
        }
    }
}
